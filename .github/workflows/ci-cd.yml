name: CI/CD Digital Replica (Public MQTT)

on:
  push:
    branches: [ "main" ]
    tags: [ "v*", "release-*", "prod-*" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  IMAGE_OWNER: ${{ secrets.DOCKERHUB_USERNAME }}
  IMAGE_NAME: digital-replica
  DR_TOKEN: ci-token
  DR_ID: dr-ci
  MQTT_BASE_TOPIC: iot/dr-ci
  MONGO_DBNAME: digital_twin_db
  MQTT_HOST: test.mosquitto.org
  MQTT_PORT: 1883

jobs:
  build-test-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f tests/requirements-test.txt ]; then pip install -r tests/requirements-test.txt; fi

      - name: Docker meta (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/heads/main') }}
            type=ref,event=tag
            type=sha,format=short,prefix=build-

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build image (local) for tests
        run: |
          docker build -t ${{ fromJSON(steps.meta.outputs.json).tags[0] }} .

      - name: Create network
        run: docker network create dr-ci-net

      - name: Start Mongo
        run: docker run -d --name mongo --network dr-ci-net -p 27017:27017 mongo:7

      - name: Start Digital Replica (uses public MQTT)
        env:
          IMG: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        run: |
          docker run -d --name dr \
            --network dr-ci-net \
            -p 8000:8000 \
            -e DR_ID="${{ env.DR_ID }}" \
            -e DR_TOKEN="${{ env.DR_TOKEN }}" \
            -e MONGODB_URI="mongodb://mongo:27017/${{ env.MONGO_DBNAME }}" \
            -e MQTT_BROKER_HOST="${{ env.MQTT_HOST }}" \
            -e MQTT_BROKER_PORT="${{ env.MQTT_PORT }}" \
            -e MQTT_BASE_TOPIC="${{ env.MQTT_BASE_TOPIC }}" \
            $IMG

      - name: Wait for app to be healthy
        run: |
          python - << 'PY'
          import time, requests, sys
          for i in range(60):
              try:
                  r = requests.get("http://localhost:8000/health", timeout=2)
                  if r.ok:
                      js = r.json()
                      print("Health:", js)
                      # Considera ok anche se mqtt=false (broker pubblico puÃ² impiegare qualche secondo)
                      if js.get("db") and js.get("dr_id"):
                          break
              except Exception as e:
                  print("Waiting app...", e)
              time.sleep(2)
          else:
              sys.exit("App not healthy in time")
          PY

      - name: Run integration tests
        env:
          BASE_URL: http://localhost:8000
          DR_TOKEN: ${{ env.DR_TOKEN }}
          MONGO_URI: mongodb://localhost:27017/${{ env.MONGO_DBNAME }}
          MQTT_HOST: ${{ env.MQTT_HOST }}
          MQTT_PORT: ${{ env.MQTT_PORT }}
          MQTT_BASE_TOPIC: ${{ env.MQTT_BASE_TOPIC }}
          DR_ID: ${{ env.DR_ID }}
        run: |
          pytest -q --maxfail=1 --disable-warnings

      - name: Push image (only on main or tags)
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Cleanup
        if: always()
        run: |
          docker logs dr || true
          docker ps -a || true
          docker rm -f dr mongo || true
          docker network rm dr-ci-net || true
